import requests
import pytest
import logging

from support_functions.courier import Courier, create_random_courier_data

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


def test_courier_create_success(random_courier):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è, –ª–æ–≥–∏–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞"""
    courier = Courier()

    data = random_courier['data']
    courier_login_obj = courier.login_courier(data['login'], data['password'])
    assert courier_login_obj['resp_code'] == 200, f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {courier_login_obj}"


def test_courier_create_twice_fail(random_courier):
    """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏"""
    data = random_courier['data']
    courier = Courier()

    duplicate_response = courier.register_new_courier(data['login'], data['password'],
                                              data['first_name'])
    assert duplicate_response['resp_code'] == 409, f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É: {duplicate_response}"



@pytest.mark.parametrize("missing_field", ["login", "password"])
def test_courier_create_missing_field(missing_field):
    """–¢–µ—Å—Ç, —á—Ç–æ –∫—É—Ä—å–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    courier = Courier()
    data = create_random_courier_data()
    data.pop(missing_field)  # –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤


    response = courier.register_new_courier(
        data.get("login"),
        data.get("password"),
        data.get("first_name")
    )

    # –ï—Å–ª–∏ API –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Å–æ–∑–¥–∞–ª–æ –∫—É—Ä—å–µ—Ä–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if response.get("resp_code") == 201:
        logger.warning(f"‚ö†Ô∏è –ö—É—Ä—å–µ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω –±–µ–∑ {missing_field}, –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...")
        print(f"‚ö†Ô∏è –ö—É—Ä—å–µ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω –±–µ–∑ {missing_field}, –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...")
        login_resp = courier.login_courier(data['login'], data['password'])
        if login_resp.get("resp_code") == 200:
            delete_resp = courier.delete_courier(login_resp['c_id'])
            assert delete_resp['resp_code'] == 200, f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞: {delete_resp}"
            logger.info(f"üóëÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫—É—Ä—å–µ—Ä —É–¥–∞–ª–µ–Ω")

    assert response['resp_code'] == 400, f"–ö—É—Ä—å–µ—Ä —Å–æ–∑–¥–∞–Ω –±–µ–∑ {missing_field}: {response}"
    logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞ –±–µ–∑ {missing_field}")

def test_courier_create_response_201(random_courier):
    """–¢–µ—Å—Ç, —á—Ç–æ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–∞ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 201"""
    # –¢–∞–∫ –∫–∞–∫ —Ñ–∏–∫—Å—Ç—É—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç –∫—É—Ä—å–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
    logger.info(f"‚úÖ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ 201 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–∞ {random_courier}")

def test_courier_create_right_response_body(random_courier):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ resp_data –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º resp_data –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Å—Ç—É—Ä–∞
    resp_data = random_courier['resp_data']

    # –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    expected_response = {"ok": True}
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
    assert resp_data == expected_response, f"–û—à–∏–±–∫–∞: {random_courier}"


