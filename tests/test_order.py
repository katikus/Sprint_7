import pytest
import logging
import copy
import allure  # –ü–æ–¥–∫–ª—é—á–∞–µ–º Allure –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤

from data.data import UserData
from support_functions.order import Order

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

@allure.suite("Order")
class TestOrder:
    @pytest.mark.parametrize("test_color", [["BLACK"], ["GREY"], ["GREY", "BLACK"], []])
    @allure.title("–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    @allure.description("–°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ü–≤–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è.")
    def test_order_create_success(self, test_color):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ü–≤–µ—Ç–æ–≤"""

        with allure.step("–°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —à–∞–±–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"):
            payload = copy.deepcopy(UserData.ORDER_DATA)
            payload["color"] = test_color
            allure.attach(str(payload), name="–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞", attachment_type=allure.attachment_type.JSON)

        logger.info(f"üì¶ –í –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ - {payload}")

        with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"):
            order = Order()
            order_resp = order.create_order(payload)
            allure.attach(str(order_resp), name="–û—Ç–≤–µ—Ç API", attachment_type=allure.attachment_type.JSON)

        with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ 201"):
            assert order_resp.get("resp_code") == 201, f"–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"

        with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç track"):
            assert "track" in order_resp["resp_json_data"], f"–û—à–∏–±–∫–∞: –í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç track, –æ—Ç–≤–µ—Ç API: {order_resp}"